name: Merge Ready Check

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted, dismissed]
  # Note: This check runs on every PR update and waits for other checks to complete
  # using a polling mechanism with the GitHub API

permissions:
  contents: read
  pull-requests: write
  checks: read
  actions: read

jobs:
  check-all-workflows:
    runs-on: ubuntu-latest

    steps:
      - name: Wait for other workflows to start
        run: |
          echo "⏳ Waiting 30 seconds for other workflows to be scheduled..."
          sleep 30

      - name: Check all required workflows
        id: check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Get the PR number from the event
            let prNumber;
            let headSha;

            if (context.payload.pull_request) {
              prNumber = context.payload.pull_request.number;
              headSha = context.payload.pull_request.head.sha;
            } else if (context.payload.review) {
              prNumber = context.payload.review.pull_request_url.split('/').pop();
            } else {
              console.log('No PR found in event payload, skipping check');
              return;
            }

            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            // Use the PR's head SHA if we don't have it from the event
            if (!headSha) {
              headSha = pr.head.sha;
            }

            // Required workflows (excluding this one)
            const requiredWorkflows = [
              'check-structure',
              'check-workflow',
              'quality',
              'smoke-tests',
              'check-review'
            ];

            // Poll for workflow status - wait up to 5 minutes for workflows to complete
            let checkRuns;
            let allCompleted = false;
            let attempts = 0;
            const maxAttempts = 30; // 30 attempts * 10 seconds = 5 minutes max

            console.log('Polling for workflow completion...');

            while (!allCompleted && attempts < maxAttempts) {
              attempts++;

              // Get all check runs for the PR's head SHA
              const response = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: headSha,
              });

              checkRuns = response.data;

              // Check if all required workflows have completed
              let completedCount = 0;
              for (const workflowName of requiredWorkflows) {
                const runs = checkRuns.check_runs.filter(run =>
                  run.name === workflowName || run.name.includes(workflowName)
                );

                if (runs.length > 0) {
                  const latestRun = runs.sort((a, b) =>
                    new Date(b.started_at) - new Date(a.started_at)
                  )[0];

                  if (latestRun.status === 'completed') {
                    completedCount++;
                  }
                }
              }

              allCompleted = (completedCount === requiredWorkflows.length);

              if (!allCompleted) {
                console.log(`Attempt ${attempts}/${maxAttempts}: ${completedCount}/${requiredWorkflows.length} workflows completed. Waiting...`);
                await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
              } else {
                console.log(`All workflows completed after ${attempts} attempts!`);
              }
            }

            if (!allCompleted) {
              console.log('Timeout: Not all workflows completed within 5 minutes');
            }

            let feedback = '## 🚦 Merge Readiness Check\n\n';
            feedback += 'This check verifies that all required workflows have passed before the PR can be merged.\n\n';
            feedback += '---\n\n';
            feedback += '### Required Workflows Status:\n\n';

            let allPassed = true;
            let someStillRunning = false;
            const workflowStatus = {};

            // Check status of each required workflow
            for (const workflowName of requiredWorkflows) {
              const runs = checkRuns.check_runs.filter(run =>
                run.name === workflowName || run.name.includes(workflowName)
              );

              if (runs.length === 0) {
                feedback += `⏳ **${workflowName}**: Waiting to run...\n`;
                workflowStatus[workflowName] = 'pending';
                someStillRunning = true;
                allPassed = false;
              } else {
                const latestRun = runs.sort((a, b) =>
                  new Date(b.started_at) - new Date(a.started_at)
                )[0];

                if (latestRun.status !== 'completed') {
                  feedback += `🔄 **${workflowName}**: Running...\n`;
                  workflowStatus[workflowName] = 'running';
                  someStillRunning = true;
                  allPassed = false;
                } else if (latestRun.conclusion === 'success') {
                  feedback += `✅ **${workflowName}**: Passed\n`;
                  workflowStatus[workflowName] = 'success';
                } else if (latestRun.conclusion === 'skipped') {
                  feedback += `⏭️ **${workflowName}**: Skipped\n`;
                  workflowStatus[workflowName] = 'skipped';
                  allPassed = false;
                } else {
                  feedback += `❌ **${workflowName}**: Failed (${latestRun.conclusion})\n`;
                  workflowStatus[workflowName] = 'failed';
                  allPassed = false;
                }
              }
            }

            feedback += '\n---\n\n';

            // Calculate score
            const passedCount = Object.values(workflowStatus).filter(s => s === 'success').length;
            const totalCount = requiredWorkflows.length;
            const percentage = Math.floor((passedCount / totalCount) * 100);

            feedback += `### 📊 Score: ${passedCount} / ${totalCount} workflows passed (${percentage}%)\n\n`;

            // Determine if ready to merge
            if (allPassed) {
              feedback += '---\n\n';
              feedback += '## ✅ **READY TO MERGE!**\n\n';
              feedback += '🎉 All required checks have passed! This PR meets all requirements and can be safely merged.\n\n';
              feedback += '**Next steps:**\n';
              feedback += '1. Review the PR one final time\n';
              feedback += '2. Click the "Merge pull request" button\n';
              feedback += '3. Choose "Squash and merge" or "Create a merge commit" as appropriate\n\n';

              core.setOutput('ready', 'true');
              core.setOutput('status', 'success');
            } else if (someStillRunning) {
              feedback += '---\n\n';
              feedback += '## ⏳ **NOT READY - Workflows Running**\n\n';
              feedback += '⏰ Some workflows are still running or pending. Please wait for all checks to complete.\n\n';
              feedback += 'This check will automatically update when workflows finish.\n\n';

              core.setOutput('ready', 'false');
              core.setOutput('status', 'pending');
            } else {
              feedback += '---\n\n';
              feedback += '## ❌ **NOT READY TO MERGE**\n\n';
              feedback += '⚠️ Some required checks have failed. Please fix the issues before merging.\n\n';
              feedback += '**To fix:**\n';
              feedback += '1. Click on the failed workflow above to see details\n';
              feedback += '2. Fix the issues in your code\n';
              feedback += '3. Push the fixes to this branch\n';
              feedback += '4. Wait for workflows to run again\n\n';

              core.setOutput('ready', 'false');
              core.setOutput('status', 'failure');
            }

            feedback += '---\n\n';
            feedback += '*This check ensures all quality gates pass before merge. Do not merge until this shows ✅ READY TO MERGE! 🚀*\n';

            // Write feedback to file
            fs.writeFileSync('/tmp/merge_feedback.md', feedback);

            // Post or update PR comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🚦 Merge Readiness Check')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: feedback
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: feedback
              });
            }

            console.log(feedback);

            // Return the readiness status
            return {
              ready: allPassed,
              passed: passedCount,
              total: totalCount,
              status: workflowStatus
            };

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚦 Merge Readiness Check Complete!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Ready to merge: ${{ steps.check.outputs.ready }}"
          echo "Status: ${{ steps.check.outputs.status }}"
          echo ""
          cat /tmp/merge_feedback.md

      - name: Fail if not ready
        if: steps.check.outputs.ready != 'true'
        run: |
          echo ""
          echo "❌ NOT READY TO MERGE!"
          echo ""
          echo "This PR cannot be merged yet because not all required workflows have passed."
          echo "Please fix any failing workflows and ensure all checks are green."
          echo ""
          exit 1
